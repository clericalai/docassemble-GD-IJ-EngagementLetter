---
metadata:
  title: Engagement Letter
  short title: Engagement
  description: |
    Law Firm Engagement Letter Contract
  authors:
    - name: Nathan Roach
      organization: GoodDocs.io
  revision_date: 2017-04-28
---
modules:
  - docassemble.base.util
  - docassemble.base.legal
---
objects:
  - case: Case
  - client: Individual
  - spouse: Individual
  - advocate: Individual
  - attorney: Individual
  - pleading: LegalFiling
  - court: Court
comment: |
  An "objects" section defines variables that are docassemble objects.
  The object types here are defined in the docassemble.base.core and
  docassemble.base.legal modules.
---
mandatory: true
code: |
  case.court = court
  pleading.case = case
comment: |
  This code sets some basic relations among the objects created in the
  objects block of this YAML file.
---
generic object: Individual
question: |
  What is ${ x.possessive('e-mail address') }?
fields:
  - E-mail: x.email
    datatype: email
comment: |
  The datatype "email" presents a text box that is like ordinary text
  boxes except that validation is applied that checks to make sure the
  e-mail address is valid.  Also, on supporting mobile web browsers,
  there is a different keyboard option (e.g, the @ sign is readily
  available).
---
generic object: Individual
question: |
  What is ${ x.object_possessive('name') }?
fields:
  - First Name: x.name.first
    default: ${ x.first_name_hint() }
  - Middle Name: x.name.middle
    required: False
  - Last Name: x.name.last
    default: ${ x.last_name_hint() }
  - Suffix: x.name.suffix
    required: False
    code: |
      name_suffix()
comment: |
  If the object does not have a name yet, generic questions can refer
  to it by the name of the variable itself.  For example, suppose you
  create an object, case.judge, with the class of Individual.  If the
  name of case.judge is ever needed, docassemble will use the question
  above to ask "What is the name of the judge in the case?"  If the
  object is called user, it will ask "What is your name?"  If the
  object is called village_idiot, it will ask "What is the village
  idiot's name?"
---
default role: attorney
code: |
  multi_user = True
  role = 'attorney'
  if introduction_made and participants_invited:
    if user_logged_in():
      if user_info().email == client_email:
        role = 'client'
---
event: role_event
question: Waiting on another participant
subquestion: |
  % if 'client' in role_needed:
  We are waiting for a client.
  % else:
  We are waiting for the attorney.
  % endif

  % if not user_logged_in():
  If you were invited to participate, please click "Sign in."
  % endif

  Press **Check** to check on the status.
buttons:
  - Check: refresh
---
field: introduction_made
question: |
  Welcome to the engagement letter generator.
subquestion:
  This is the start of the engagement letter system.
  % if role = 'attorney':
    You are the attorney. Your email is ${ user_info().email }
  % elif role = 'client':
    You are the client
  % else
  We could not determine your role
  % endif
  To continue, press **Continue**.
---
code: |
  if attorney_email == client_email:
    organizer_messed_up
  else:
    recipients_ok = True
---
field: participants_invited
need: recipients_ok
question: |
  Invite the client signor
subquestion: |
  Ok, send e-mails to ${ client_email } and
  ${ attorney_email } inviting them to participate.

  Tell them to go to the following URL:

  [${ interview_url() }](${ interview_url() })
---
  question: |
  What is the e-mail address of the client signor?
fields:
  - Client Signor: client_email
    datatype: email
---
mandatory: True
code: |
  user_done
---
